// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CONSOLES {
  nes
  snes
  gb
  gbc
  gba
  n64
  md
  gg
  ms
  pce
  ps1
  sega32
  vb
  sat
  neo
  gcn
  atari2600
  panasonic3DO
  cdi
  jaguar
  ngp
}

model Genre {
  id   Int    @id
  name String
  slug String
  Game Game[]
}

model Collection {
  id    Int    @id
  games Int[]
  name  String
  slug  String @unique
  Game  Game[]
}

model Game {
  igdb_id            Int
  id                 Int          @id @default(autoincrement())
  console            CONSOLES
  alternative_names  Json?
  cover              Json?
  first_release_date Int?
  franchise          Json?
  genres             Genre[]
  collections        Collection[]
  involved_companies Json?
  name               String
  screenshots        Json?
  slug               String
  storyline          String?
  summary            String?
  total_rating_count Int?
  total_rating       Float?
  url                String
  videos             Json?
  finishedGames      User[]       @relation(name: "finishedGames")
  favoriteGames      User[]       @relation(name: "favoriteGames")
  playingGames       User[]       @relation(name: "playingGames")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  ext_expires_in    Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  finished      Game[]    @relation("finishedGames")
  playing       Game[]    @relation("playingGames")
  favorite      Game[]    @relation("favoriteGames")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
